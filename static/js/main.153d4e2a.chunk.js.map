{"version":3,"sources":["components/Panel.js","components/Divider.js","components/SlidingPanels.js","components/ToolBar.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","className","style","width","children","Divider","isSlideable","left","onMouseDown","onMouseUp","SlidingPanels","useState","initlPanelWidh","lPanelWidth","setLPanelWidth","isClicked","setClicked","thisWidth","setWidth","hasTransition","setHasTransition","useEffect","window","addEventListener","slideDone","removeEventListener","measuredRef","useCallback","node","getBoundingClientRect","e","preventDefault","forcePanelWidth","setTimeout","ref","onMouseMove","percent","event","pageX","getCursorPos","syncWidth","leftChildren","rightChildren","ToolBar","onClick","splitPanel","fullLeft","fullRight","Left","height","backgroundColor","Right","Boolean","location","hostname","match","ReactDOM","render","panelWidth","setPanelWidth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.153d4e2a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Panel.css';\n\n// just a panel that can be resized horizontally by the top component\n\nexport default function Panel(props) {\n  return (\n    <div className='panel' style={{ width: `${props.width}%` }}>\n      { props.children }\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  width: PropTypes.number\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Divider.css';\n\n// this component is just a divider for to 2 side by side components\n// it is meant to be used with SlidingPanels for showing a slider for 2 panels which should resize the panels\n\nexport default function Divider(props) {\n  return (\n    <div\n      className={ `divider ${props.isSlideable ? 'slideable' : ''} ${props.className || ''}` }\n      style={{left: `${props.left}%`}}\n      onMouseDown={ props.onMouseDown}\n      onMouseUp={ props.onMouseUp}>\n    </div>\n  );\n}\n\nDivider.propTypes = {\n  isSlideable: PropTypes.bool,\n  className: PropTypes.string,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  left: PropTypes.number\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Panel from './Panel';\nimport Divider from './Divider';\nimport PropTypes from 'prop-types';\nimport '../styles/components/SlidingPanels.css';\n\n// a component that handles sliding 2 panels to resize in a set width\n// there should be a set height using classNames in css\n// the parent class should also keep track of the width\n// prop.forcePanelWidth is checked if different with this current width to force update.\n// prop.syncWidth is a callback for the parent to recieve the width to sync with this width\n// TODO: make responsive (need to set width when window changes or this changes)\nexport default function SlidingPanels(props) {\n  let [ lPanelWidth, setLPanelWidth ] = useState((props.initlPanelWidh || 50));\n  let [ isClicked, setClicked ] = useState(false);\n  let [ thisWidth, setWidth ] = useState(0);\n  let [ hasTransition, setHasTransition ] = useState(false);\n\n  // might need to check if it is removing listener since i was having issues with removing listener on window before this\n  useEffect(() => {\n    window.addEventListener('mouseup', slideDone);\n    return () => window.removeEventListener('mouseup', slideDone);\n  })\n\n  const measuredRef = useCallback(node => {\n    if (node !== null) {\n      setWidth(node.getBoundingClientRect().width);\n    }\n  }, []);\n\n  // slide the panels only if clicked (mousedown)\n  function slideMove(e) {\n    let percent = null;\n    if(!isClicked) return false;\n    percent = getCursorPos(e);\n    setLPanelWidth(percent);\n    // make sure to have a callback to syncWidth if so it won't forcechange the width\n    props.syncWidth(percent);\n  }\n\n  // set clicked to true to make the panel slideable\n  function slideReady(e) {\n    e.preventDefault();\n    setClicked(true);\n  }\n\n  // returns a percent of where the cursor is in this box\n  function getCursorPos(e) {\n    e = e || window.event;\n    return (e.pageX / thisWidth) * 100;\n  }\n\n  // set clicked to false to stop from sliding (when mouseup)\n  function slideDone(e) {\n    e.preventDefault();\n    setClicked(false);\n  }\n\n  // forces a width change from parent component if the lPanelWidth does not match forcePanelWidth.\n  if(props.forcePanelWidth !== lPanelWidth && !hasTransition && !isClicked) {\n    setHasTransition(true);\n    // delay to make add class to delay transition (smoother) and change width\n    setTimeout(()=>{\n      setLPanelWidth(props.forcePanelWidth);\n      // this delay should equal to the transition in css\n      setTimeout(()=> setHasTransition(false), 350);\n    }, 1);\n  }\n\n  // the divider is set in middle by having starting in the width of the lPanel\n  return (\n    <div\n      className={`sliding-panels ${props.className || ''} ${hasTransition ? 'hasTransition' : ''}`}\n      ref={measuredRef}\n      onMouseMove={slideMove}>\n      <Panel width={ lPanelWidth }>{ props.leftChildren }</Panel>\n      <Divider\n        left={lPanelWidth}\n        onMouseDown={slideReady}\n        onMouseUp={slideDone}\n        isSlideable={true}/>\n      <Panel width={ 100 - lPanelWidth }>{ props.rightChildren }</Panel>\n    </div>\n  );\n}\n\nSlidingPanels.propTypes = {\n  className: PropTypes.string,\n  initlPanelWidh: PropTypes.number,\n  forcePanelWidth: PropTypes.number,\n  syncWidth: PropTypes.func,\n  leftChildren: PropTypes.node,\n  rightChildren: PropTypes.node\n}\n","import React from 'react';\nimport '../styles/components/Toolbar.css';\nimport PropTypes from 'prop-types';\n\n// a component representing a toolbar for an editor\n\nexport default function ToolBar(props) {\n  return (\n    <div className={`toolbar ${props.className || ''}`}>\n      <div className='toggle-panel-icon' onClick={props.splitPanel}>Split</div>\n      <div className='toggle-panel-icon' onClick={props.fullLeft}>Full Left</div>\n      <div className='toggle-panel-icon' onClick={props.fullRight}>Full Right</div>\n    </div>\n  );\n}\n\nToolBar.propTypes = {\n  className: PropTypes.string,\n  splitPanel: PropTypes.func,\n  fullLeft: PropTypes.func,\n  fullRight: PropTypes.func\n}\n","import React, { useState } from 'react';\nimport SlidingPanels from './components/SlidingPanels';\nimport ToolBar from './components/ToolBar';\nimport './styles/App.css';\n\nfunction Left() {\n  return (\n    <div style={{ height: '100%', width: '100%', backgroundColor: 'blue' }}>Left panel stuff</div>\n  );\n}\n\nfunction Right() {\n  return (\n    <div style={{ height: '100%', width: '100%', backgroundColor: 'red' }}>Right Panel stuff</div>\n  );\n}\n\nexport default function App() {\n  let [ panelWidth, setPanelWidth ] = useState(50);\n\n\n  function splitPanel() {\n    setPanelWidth(50);\n  }\n\n  function fullLeft() {\n    setPanelWidth(100);\n  }\n\n  function fullRight() {\n    setPanelWidth(0);\n  }\n\n  function syncWidth(width) {\n    setPanelWidth(width);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <ToolBar\n        splitPanel={splitPanel}\n        fullLeft={fullLeft}\n        fullRight={fullRight}/>\n      <SlidingPanels\n        className='app-sliding-panels'\n        leftChildren={<Left />}\n        rightChildren={<Right />}\n        initlPanelWidh={50}\n        syncWidth={syncWidth}\n        forcePanelWidth={panelWidth}/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}