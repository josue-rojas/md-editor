{"version":3,"sources":["components/Panel.js","components/Divider.js","components/SlidingPanels.js","components/ToolBar.js","components/CustomTextArea.js","render_functions/RenderMD.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","className","style","width","children","Divider","isSlideable","left","onMouseDown","onMouseUp","SlidingPanels","useState","initlPanelWidh","lPanelWidth","setLPanelWidth","isClicked","setClicked","thisWidth","setWidth","hasTransition","setHasTransition","useEffect","window","addEventListener","slideDone","removeEventListener","measuredRef","useCallback","node","getBoundingClientRect","e","preventDefault","forcePanelWidth","setTimeout","ref","onMouseMove","percent","event","pageX","getCursorPos","syncWidth","leftChildren","rightChildren","ToolBar","onClick","toggleDarkmode","splitPanel","fullLeft","fullRight","h1","h2","h3","h4","h5","h6","CustomTextArea","setCursorPos","textAreaRef","useRef","setCursorPosState","cursorPos","document","activeElement","selectionStart","selectionEnd","syncCursorPos","focusTextarea","i","offset","stopPropagation","current","focus","range","caretPositionFromPoint","clientX","clientY","caretRangeFromPoint","startOffset","value","val","onChange","target","onKeyPress","charCode","renderText","split","textComponent","map","el","_offset","length","key","RenderMD","text","type","specialChars","substring","TextPanel","height","Boolean","location","hostname","match","ReactDOM","render","panelWidth","setPanelWidth","textValue","setTextValue","isDarkMode","setDarkMode","_textValue","_cursorPos","injectTextBeg","pos","ending","join","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd365f77.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Panel.css';\n\n// just a panel that can be resized horizontally by the top component\n\nexport default function Panel(props) {\n  return (\n    <div className='panel' style={{ width: `${props.width}%` }}>\n      { props.children }\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  width: PropTypes.number\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Divider.css';\n\n// this component is just a divider for to 2 side by side components\n// it is meant to be used with SlidingPanels for showing a slider for 2 panels which should resize the panels\n\nexport default function Divider(props) {\n  return (\n    <div\n      className={ `divider ${props.isSlideable ? 'slideable' : ''} ${props.className || ''}` }\n      style={{left: `${props.left}%`}}\n      onMouseDown={ props.onMouseDown}\n      onMouseUp={ props.onMouseUp}>\n    </div>\n  );\n}\n\nDivider.propTypes = {\n  isSlideable: PropTypes.bool,\n  className: PropTypes.string,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  left: PropTypes.number\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Panel from './Panel';\nimport Divider from './Divider';\nimport PropTypes from 'prop-types';\nimport '../styles/components/SlidingPanels.css';\n\n// a component that handles sliding 2 panels to resize in a set width\n// there should be a set height using classNames in css\n// the parent class should also keep track of the width\n// prop.forcePanelWidth is checked if different with this current width to force update.\n// prop.syncWidth is a callback for the parent to recieve the width to sync with this width\n// TODO: make responsive (need to set width when window changes or this changes)\nexport default function SlidingPanels(props) {\n  let [ lPanelWidth, setLPanelWidth ] = useState((props.initlPanelWidh || 50));\n  let [ isClicked, setClicked ] = useState(false);\n  let [ thisWidth, setWidth ] = useState(0);\n  let [ hasTransition, setHasTransition ] = useState(false);\n\n  // might need to check if it is removing listener since i was having issues with removing listener on window before this\n  useEffect(() => {\n    window.addEventListener('mouseup', slideDone);\n    return () => window.removeEventListener('mouseup', slideDone);\n  })\n\n  const measuredRef = useCallback(node => {\n    if (node !== null) {\n      setWidth(node.getBoundingClientRect().width);\n    }\n  }, []);\n\n  // slide the panels only if clicked (mousedown)\n  function slideMove(e) {\n    let percent = null;\n    if(!isClicked) return false;\n    percent = getCursorPos(e);\n    setLPanelWidth(percent);\n    // make sure to have a callback to syncWidth if so it won't forcechange the width\n    props.syncWidth(percent);\n  }\n\n  // set clicked to true to make the panel slideable\n  function slideReady(e) {\n    e.preventDefault();\n    setClicked(true);\n  }\n\n  // returns a percent of where the cursor is in this box\n  function getCursorPos(e) {\n    e = e || window.event;\n    return (e.pageX / thisWidth) * 100;\n  }\n\n  // set clicked to false to stop from sliding (when mouseup)\n  function slideDone(e) {\n    e.preventDefault();\n    setClicked(false);\n  }\n\n  // forces a width change from parent component if the lPanelWidth does not match forcePanelWidth.\n  if(props.forcePanelWidth !== lPanelWidth && !hasTransition && !isClicked) {\n    setHasTransition(true);\n    // delay to make add class to delay transition (smoother) and change width\n    setTimeout(()=>{\n      setLPanelWidth(props.forcePanelWidth);\n      // this delay should equal to the transition in css\n      setTimeout(()=> setHasTransition(false), 350);\n    }, 1);\n  }\n\n  // the divider is set in middle by having starting in the width of the lPanel\n  return (\n    <div\n      className={`sliding-panels ${props.className || ''} ${hasTransition ? 'hasTransition' : ''}`}\n      ref={measuredRef}\n      onMouseMove={slideMove}>\n      <Panel width={ lPanelWidth }>{ props.leftChildren }</Panel>\n      <Divider\n        left={lPanelWidth}\n        onMouseDown={slideReady}\n        onMouseUp={slideDone}\n        isSlideable={true}/>\n      <Panel width={ 100 - lPanelWidth }>{ props.rightChildren }</Panel>\n    </div>\n  );\n}\n\nSlidingPanels.propTypes = {\n  className: PropTypes.string,\n  initlPanelWidh: PropTypes.number,\n  forcePanelWidth: PropTypes.number,\n  syncWidth: PropTypes.func,\n  leftChildren: PropTypes.node,\n  rightChildren: PropTypes.node\n}\n","import React from 'react';\nimport '../styles/components/Toolbar.css';\nimport PropTypes from 'prop-types';\n\n// a component representing a toolbar for an editor\n\nexport default function ToolBar(props) {\n  return (\n    <div className={`toolbar ${props.className || ''}`}>\n      <div className='toggle-panel-icon icon icon-darkmode' onClick={props.toggleDarkmode}></div>\n      <div className='toggle-panel-icon icon icon-half' onClick={props.splitPanel}></div>\n      <div className='toggle-panel-icon icon icon-lhalf' onClick={props.fullLeft}></div>\n      <div className='toggle-panel-icon icon icon-rhalf' onClick={props.fullRight}></div>\n      <div className='toggle-panel-icon h1' onClick={props.h1}>H1</div>\n      <div className='toggle-panel-icon h2' onClick={props.h2}>H2</div>\n      <div className='toggle-panel-icon h3' onClick={props.h3}>H3</div>\n      <div className='toggle-panel-icon h4' onClick={props.h4}>H4</div>\n      <div className='toggle-panel-icon h5' onClick={props.h5}>H5</div>\n      <div className='toggle-panel-icon h6' onClick={props.h6}>H6</div>\n    </div>\n  );\n}\n\nToolBar.propTypes = {\n  className: PropTypes.string,\n  splitPanel: PropTypes.func,\n  fullLeft: PropTypes.func,\n  fullRight: PropTypes.func,\n  toggleDarkmode: PropTypes.func,\n  h1: PropTypes.func,\n  h2: PropTypes.func,\n  h3: PropTypes.func,\n  h4: PropTypes.func,\n  h5: PropTypes.func,\n  h6: PropTypes.func\n}\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/CustomTextArea.css';\n\n// todo: improve rendering.\n// right now it is laggy because when it rerenders it does splits of array multiple times (which is becomes slower when it is a lot of text)\n// i think removing the split should make it faster. this might be hard to do since each line depends on the other to figure out the offset for the cursor.\n// an idea i have is to figure out which line is changed and only update that one and the ones after. this way we render best case scenario 1 but worse is still n lines... still way better than n all the time.\n\n// a cursor is that thing that blinks when you are typing...\nfunction Cursor(props) {\n  return (\n    <div\n      className='cursor'\n       style={{ animationDuration: `${props.animationDuration | 450}ms` }}>\n     </div>\n  )\n}\n\nCursor.propTypes = {\n  animationDuration: PropTypes.number\n}\n\n\n// a CustomTextArea uses a textarea and a div to render a pseudo rich text editor.\n// one of the porps is renderText which is a function that takes in a string and returns components or node that represents the rendered text\nexport default function CustomTextArea(props) {\n  // let [ val, setVal ] = useState(\"\");\n  let [ cursorPos, setCursorPos ] = useState(0);\n  let textAreaRef = useRef(null);\n\n  // onchange function for textarea\n  function onChange(e) {\n    setCursorPosState(document.activeElement.selectionStart);\n    // setCursorPos(document.activeElement.selectionStart);\n    props.onChange(e.target.value);\n    // setVal(e.target.value);\n  }\n\n  // special keys need special attention\n  // TODO: need to change cause i forgot that the textbox width does or font size does not match div so it wraps differently\n  // if we use the current position of the cursor then we can use caretPositionFromPoint to get the new position. \n  function onKeyPress(e) {\n    switch(e.charCode) {\n      // to make it easier arrows keys collapse to the last one to set the cursor the same way\n      case 37:\n        // falls through\n      case 38:\n        // falls through\n      case 39:\n        // falls through\n      case 40:\n        setCursorPosState(document.activeElement.selectionStart);\n        break;\n      default:\n        // do nothing\n    }\n  }\n\n  // set the posiion of the cursor...\n  function setCursorPosState(cursorPos) {\n    setCursorPos(cursorPos);\n    document.activeElement.selectionStart = cursorPos;\n    document.activeElement.selectionEnd = cursorPos;\n    if(props.syncCursorPos) props.syncCursorPos(cursorPos);\n  }\n\n  // focus the textarea to change the text\n  // also move the cursor to it's clicked position\n  function focusTextarea(e, i, offset) {\n    e.stopPropagation();\n    textAreaRef.current.focus();\n    let cursorPos = getCursorPos(e) + offset;\n    setCursorPosState(cursorPos);\n     // setCursorPos(cursorPos);\n    // document.activeElement.selectionStart = cursorPos;\n    // document.activeElement.selectionEnd = cursorPos;\n  }\n\n  // get cursor position (might need to figure out different way since it is not fully supported).\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint\n  function getCursorPos(e) {\n    let range;\n    let offset;\n    if (document.caretPositionFromPoint) {\n      range = document.caretPositionFromPoint(e.clientX, e.clientY);\n      offset = range.offset;\n    } else if (document.caretRangeFromPoint) {\n      range = document.caretRangeFromPoint(e.clientX, e.clientY);\n      offset = range.startOffset;\n    }\n    // console.table([e.clientX, e.clientY])\n    // console.log('range', range);\n    // console.log('offset', offset);\n    return offset;\n  }\n\n  // function returns the how the text is suppose to be rendered\n  // by default the render function is regular text with new lines being a new div\n  // you can pass in a prop that renders the value differently.\n  function renderText(val, cursorPos) {\n    if(props.renderText) {\n      // todo: should pass cursor position\n      return props.renderText(val, focusTextarea);\n    }\n    val = val.split('\\n');\n    let offset = 0;\n    let textComponent = val.map((el, i) => {\n      // scoping the offset so the onclick function gets the right value\n      let _offset = offset;\n      // getting and placing a cursor is more troublesome than i thought.\n      // let cursorPosInArr = cursorPos - offset;\n      // let cursor = cursorPosInArr > -1 && cursorPosInArr < el.length+1 ? \"\" : '';\n      offset += el.length+1;\n      let component = (<div\n        key={`text-render-${i}`}\n        onClick={(e) => focusTextarea(e, i, _offset)}\n        className='norm-text'>\n        {el}\n      </div>)\n      return component;\n    });\n    return (\n      <div\n        onClick={focusTextarea}\n        className='pseudo-textarea'>\n        { textComponent }\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`custom-text-area ${props.className || ''}`}>\n      <textarea\n        ref={textAreaRef}\n        value={props.val}\n        onChange={onChange}\n        onKeyPress={onKeyPress}/>\n      { renderText(props.val, cursorPos) }\n    </div>\n  );\n}\n\nCustomTextArea.propTypes = {\n  renderText: PropTypes.func,\n  onChange: PropTypes.func,\n  syncCursorPos: PropTypes.func,\n  val: PropTypes.string\n}\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\n// const types = {\n//   '#': 'heading-1',\n//   '##': 'heading-2',\n//   '###': 'heading-3',\n//   '####': 'heading-4',\n//   '#####': 'heading-5',\n//   '######': 'heading-6',\n// }\n\nexport default function RenderMD(text, focusTextarea) {\n  let val = text.split('\\n');\n  let offset = 0;\n  let textComponent = val.map((el, i) => {\n    let type = '';\n    let className='norm-text';\n    let specialChars = 0;\n    // so this should only check the first letter first so it won't waste time checking the rest\n    // this is assuming we only care for the md things that are at the start\n    for(let i in el) {\n      type += el[i];\n      let isBreakOut = false;\n      switch(type) {\n        case '# ':\n          specialChars = 2;\n          className = 'heading-1';\n          break;\n        case '## ':\n          specialChars = 3;\n          className = 'heading-2';\n          break;\n        case '### ':\n          specialChars = 4;\n          className = 'heading-3';\n          break;\n        case '#### ':\n          specialChars = 5;\n          className = 'heading-4';\n          break;\n        case '##### ':\n          specialChars = 6;\n          className = 'heading-5';\n          break;\n        case '###### ':\n          specialChars = 7;\n          className = 'heading-6';\n          break;\n        default:\n          isBreakOut = true;\n        if(isBreakOut) break;\n      }\n    }\n    let _offset = offset + specialChars;\n    offset += el.length + 1;\n    return (\n      <div\n        className={className}\n        key={`text-render-${i}`}\n        onClick={(e) => focusTextarea(e, i, _offset)}>\n      {el.substring(specialChars)}\n      </div>\n    );\n  });\n  return (\n    <div\n      onClick={focusTextarea}\n      className='pseudo-textarea'>\n      {textComponent}\n    </div>\n  );\n}\n\n\n// RenderMD.propTypes = {\n//   text: PropTypes.string\n// }\n","import React, { useState } from 'react';\nimport SlidingPanels from './components/SlidingPanels';\nimport ToolBar from './components/ToolBar';\nimport CustomTextArea from './components/CustomTextArea';\nimport RenderMD from './render_functions/RenderMD';\nimport './styles/App.css';\n\nfunction TextPanel(props) {\n  return (\n    <div style={{ height: '100%', width: '100%' }}>\n      <CustomTextArea\n        val={props.val}\n        onChange={props.onChange}\n        renderText={props.renderText}\n        syncCursorPos={props.syncCursorPos}/>\n    </div>\n  );\n}\n\nexport default function App() {\n  let [ panelWidth, setPanelWidth ] = useState(50);\n  let [ cursorPos, setCursorPos ] = useState(0);\n  let [ textValue, setTextValue ] = useState(\"\");\n  let [ isDarkMode, setDarkMode ] = useState(false);\n\n  function splitPanel() {\n    setPanelWidth(50);\n  }\n\n  function fullLeft() {\n    setPanelWidth(100);\n  }\n\n  function fullRight() {\n    setPanelWidth(0);\n  }\n\n  function syncWidth(width) {\n    setPanelWidth(width);\n  }\n\n  function onChange(_textValue) {\n    setTextValue(_textValue)\n  }\n\n  function syncCursorPos(_cursorPos) {\n    setCursorPos(_cursorPos);\n  }\n\n  // function injectText(text, pos) {\n  //\n  // }\n\n  // bad idea, but it is suppose to find the closest \\n and inject text there...\n  function injectTextBeg(text, pos) {\n    let val = textValue.split('\\n');\n    let ending = 0;\n    // let start = 0;\n    for(let i in val) {\n      ending += val[i].length;\n      if(ending - pos >= 0) {\n        // start = i;\n        val[i] = text + val[i];\n        // console.log(val[i]);\n        // ending -= val[i].length;\n        break;\n      }\n    }\n    // console.log(val);\n    setTextValue(val.join('\\n'));\n  }\n\n  function toggleDarkmode() {\n    setDarkMode(!isDarkMode);\n  }\n  return (\n    <div className={`App ${isDarkMode ? 'dark' : ''}`}>\n      <ToolBar\n        splitPanel={splitPanel}\n        fullLeft={fullLeft}\n        fullRight={fullRight}\n        toggleDarkmode={toggleDarkmode}\n        h1={()=> injectTextBeg('# ', cursorPos)}\n        h2={()=> injectTextBeg('## ', cursorPos)}\n        h3={()=> injectTextBeg('### ', cursorPos)}\n        h4={()=> injectTextBeg('#### ', cursorPos)}\n        h5={()=> injectTextBeg('##### ', cursorPos)}\n        h6={()=> injectTextBeg('###### ', cursorPos)} />\n      <SlidingPanels\n        className='app-sliding-panels'\n        leftChildren={<TextPanel\n          val={textValue}\n          onChange={onChange}\n          syncCursorPos={syncCursorPos}/>}\n        rightChildren={<TextPanel\n          val={textValue}\n          onChange={onChange}\n          syncCursorPos={syncCursorPos}\n          renderText={RenderMD}/>}\n        initlPanelWidh={50}\n        syncWidth={syncWidth}\n        forcePanelWidth={panelWidth}/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}